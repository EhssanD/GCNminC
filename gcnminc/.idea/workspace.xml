<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="f3e5587a-6d94-489f-9f7b-bce1a0b7021a" name="Default" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CreatePatchCommitExecutor">
    <option name="PATCH_PATH" value="" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="default_target" />
  <component name="FavoritesManager">
    <favorites_list name="GCNminC" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-55">
              <caret line="239" column="18" lean-forward="false" selection-start-line="239" selection-start-column="18" selection-end-line="239" selection-end-column="18" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="jar://$PROJECT_DIR$/lib/clojure-1.8.0.jar!/clojure/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="80155">
              <caret line="4715" column="6" lean-forward="false" selection-start-line="4715" selection-start-column="6" selection-end-line="4715" selection-end-column="6" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="17">
              <caret line="1" column="41" lean-forward="false" selection-start-line="1" selection-start-column="41" selection-end-line="1" selection-end-column="41" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>\\</find>
      <find>section</find>
      <find>text</find>
      <find>output-filename</find>
    </findStrings>
    <replaceStrings>
      <replace>/</replace>
      <replace>output-file-path</replace>
    </replaceStrings>
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
        <option value="$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/gcnminc/core.clj" />
      </list>
    </option>
  </component>
  <component name="LeiningenProjectSettings">
    <option name="selectedProfiles">
      <list>
        <option value="base" />
        <option value="system" />
        <option value="user" />
        <option value="provided" />
        <option value="dev" />
        <option value="uberjar" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="35" />
    <option name="y" value="4" />
    <option name="width" value="1684" />
    <option name="height" value="1036" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scratches" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="gcnminc" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="External Libraries" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ExternalLibrariesNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="gcnminc" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="gcnminc" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="gcnminc" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="gcnminc" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="src" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="gcnminc" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$USER_HOME$/AppData/Local/Temp/GCNminC-gcnminc-183773424960184705.asm" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.splitter.proportion" value="0.21645446" />
  </component>
  <component name="ReplState" timestamp="1487406914895">{:repl-history {:ide [], :local [&quot;(let [filename  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_llvm.asm\&quot;\n      lines (clojure.string/split (slurp filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n      lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;)  lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;)  lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n      ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n      ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n      ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n      lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n      {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n      lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n      kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n      kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;)  %1) kernels)\n      kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n      kernels (map (fn [lines]\n                     (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                           groups  (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                           args    (nth groups 3 '())\n                           args    (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                           groups  (list\n                                     (list\n                                       \&quot;\&quot;\n                                       \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                       \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                       \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                       \&quot;\&quot;\n                                       (first (first groups)))\n                                     (list\n                                       \&quot;\\t.config\&quot;\n                                       \&quot;\\t\\t.dims x\&quot;\n                                       \&quot;\\t\\t.floatmode 192\&quot;)\n                                     (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                     (list\n                                       \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                       \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                     (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                     (list \&quot;\\t.text\&quot;)\n                                     (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                     (-&gt;&gt; (nth groups 2 nil)\n                                          (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                          ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                          (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                          (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                          ))\n                            lines  (apply concat groups)]\n                       lines))\n                    kernels)\n      ]\n\n  (spit \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4.asm\&quot;\n        (apply str\n               (concat\n          (list\n            \&quot;.amdcl2\\n\&quot;\n            \&quot;.gpu Stoney\\n\&quot;\n            \&quot;.64bit\\n\&quot;\n            \&quot;.arch_minor 0\\n\&quot;\n            \&quot;.arch_stepping 4\\n\&quot;\n            \&quot;.driver_version 200406\\n\&quot;\n            \&quot;\&quot;)\n          (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels)))))))&quot; &quot;(-main\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_llvm.asm\&quot;\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_GCNminC.asm\&quot;)&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename  (nth args 0)\n        output-filename  (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;)  %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups  (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args    (nth groups 3 '())\n                             args    (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups  (list\n                                       (list\n                                         \&quot;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;\&quot;\n                                         (first (first groups)))\n                                       (list\n                                         \&quot;\\t.config\&quot;\n                                         \&quot;\\t\\t.dims x\&quot;\n                                         \&quot;\\t\\t.floatmode 192\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                       (list\n                                         \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                         \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                       (list \&quot;\\t.text\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                       (-&gt;&gt; (nth groups 2 nil)\n                                            (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                            ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                            ))\n                             lines  (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename  (nth args 0)\n        output-filename  (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;)  %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups  (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args    (nth groups 3 '())\n                             args    (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups  (list\n                                       (list\n                                         \&quot;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;\&quot;\n                                         (first (first groups)))\n                                       (list\n                                         \&quot;\\t.config\&quot;\n                                         \&quot;\\t\\t.dims x\&quot;\n                                         \&quot;\\t\\t.floatmode 192\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                       (list\n                                         \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                         \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                       (list \&quot;\\t.text\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                       (-&gt;&gt; (nth groups 2 nil)\n                                            (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                            ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                            ))\n                             lines  (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (print metadata)\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename (nth args 0)\n        output-filename (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;) %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args (nth groups 3 '())\n                             args (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups (list\n                                      (list\n                                        \&quot;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;\&quot;\n                                        (first (first groups)))\n                                      (list\n                                        \&quot;\\t.config\&quot;\n                                        \&quot;\\t\\t.dims x\&quot;\n                                        \&quot;\\t\\t.floatmode 192\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                      (list\n                                        \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                        \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                      (list \&quot;\\t.text\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                      (-&gt;&gt; (nth groups 2 nil)\n                                           (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                           ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                           ))\n                             lines (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (doall (print metadata))\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename (nth args 0)\n        output-filename (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        [metadata lines] (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;) %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args (nth groups 3 '())\n                             args (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups (list\n                                      (list\n                                        \&quot;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;\&quot;\n                                        (first (first groups)))\n                                      (list\n                                        \&quot;\\t.config\&quot;\n                                        \&quot;\\t\\t.dims x\&quot;\n                                        \&quot;\\t\\t.floatmode 192\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                      (list\n                                        \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                        \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                      (list \&quot;\\t.text\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                      (-&gt;&gt; (nth groups 2 nil)\n                                           (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                           ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                           ))\n                             lines (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (doall (print metadata))\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(gcnminc.core/-main\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_llvm.asm\&quot;\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_GCNminC.asm\&quot;)&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename (nth args 0)\n        output-filename (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        [metadata _ lines] (partition-by #(= \&quot;\\t.end_amdgpu_runtime_metadata\&quot;) lines) ; Drop unnecessary lines at the beginning of the file.\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;) %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args (nth groups 3 '())\n                             args (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups (list\n                                      (list\n                                        \&quot;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;\&quot;\n                                        (first (first groups)))\n                                      (list\n                                        \&quot;\\t.config\&quot;\n                                        \&quot;\\t\\t.dims x\&quot;\n                                        \&quot;\\t\\t.floatmode 192\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                      (list\n                                        \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                        \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                      (list \&quot;\\t.text\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                      (-&gt;&gt; (nth groups 2 nil)\n                                           (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                           ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                           ))\n                             lines (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (doall (print metadata))\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;metadata&quot; &quot;(count metadata)&quot;], :remote []}}</component>
  <component name="RunManager" selected="Leiningen.uberjar">
    <configuration default="false" name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="gcnminc" />
      <setting name="path" value="$PROJECT_DIR$/src/gcnminc/core.clj" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/gcnminc" />
      <setting name="repl" value="false" />
      <method />
    </configuration>
    <configuration default="true" type="AndroidRunConfigurationType" factoryName="Android App">
      <module name="" />
      <option name="DEPLOY" value="true" />
      <option name="ARTIFACT_NAME" value="" />
      <option name="PM_INSTALL_OPTIONS" value="" />
      <option name="ACTIVITY_EXTRA_FLAGS" value="" />
      <option name="MODE" value="default_activity" />
      <option name="TARGET_SELECTION_MODE" value="SHOW_DIALOG" />
      <option name="PREFERRED_AVD" value="" />
      <option name="CLEAR_LOGCAT" value="false" />
      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
      <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
      <option name="FORCE_STOP_RUNNING_APP" value="true" />
      <option name="DEBUGGER_TYPE" value="Java" />
      <option name="USE_LAST_SELECTED_DEVICE" value="false" />
      <option name="PREFERRED_AVD" value="" />
      <Java />
      <Profilers>
        <option name="ENABLE_ADVANCED_PROFILING" value="true" />
        <option name="GAPID_ENABLED" value="false" />
        <option name="GAPID_DISABLE_PCS" value="false" />
        <option name="SUPPORT_LIB_ENABLED" value="true" />
        <option name="INSTRUMENTATION_ENABLED" value="true" />
      </Profilers>
      <option name="DEEP_LINK" value="" />
      <option name="ACTIVITY_CLASS" value="" />
      <method />
    </configuration>
    <configuration default="true" type="AndroidTestRunConfigurationType" factoryName="Android Tests">
      <module name="" />
      <option name="TESTING_TYPE" value="0" />
      <option name="INSTRUMENTATION_RUNNER_CLASS" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="CLASS_NAME" value="" />
      <option name="PACKAGE_NAME" value="" />
      <option name="EXTRA_OPTIONS" value="" />
      <option name="TARGET_SELECTION_MODE" value="SHOW_DIALOG" />
      <option name="PREFERRED_AVD" value="" />
      <option name="CLEAR_LOGCAT" value="false" />
      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
      <option name="SKIP_NOOP_APK_INSTALLATIONS" value="true" />
      <option name="FORCE_STOP_RUNNING_APP" value="true" />
      <option name="DEBUGGER_TYPE" value="Java" />
      <option name="USE_LAST_SELECTED_DEVICE" value="false" />
      <option name="PREFERRED_AVD" value="" />
      <Java />
      <Profilers>
        <option name="ENABLE_ADVANCED_PROFILING" value="true" />
        <option name="GAPID_ENABLED" value="false" />
        <option name="GAPID_DISABLE_PCS" value="false" />
        <option name="SUPPORT_LIB_ENABLED" value="true" />
        <option name="INSTRUMENTATION_ENABLED" value="true" />
      </Profilers>
      <method />
    </configuration>
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
      <method />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <configuration default="true" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="" />
      <setting name="path" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="" />
      <setting name="repl" value="false" />
      <method />
    </configuration>
    <configuration default="true" type="GradleRunConfiguration" factoryName="Gradle">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list />
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <method />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
      <method />
    </configuration>
    <configuration default="true" type="JarApplication" factoryName="JAR Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Java Scratch" factoryName="Java Scratch">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="SCRATCH_FILE_ID" value="0" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="JetRunConfigurationType" factoryName="Kotlin">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="gcnminc" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType" factoryName="Kotlin script">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="filePath" />
      <option name="vmParameters" />
      <option name="alternativeJrePath" />
      <option name="programParameters" />
      <option name="passParentEnvs" value="true" />
      <option name="workingDirectory" />
      <option name="isAlternativeJrePathEnabled" value="false" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="LeiningenRunConfiguration" factoryName="Leiningen">
      <LeiningenRunnerParameters>
        <option name="myGoals">
          <list />
        </option>
        <option name="myWorkingDirectory" value="" />
        <option name="profiles" value="" />
        <option name="trampoline" value="false" />
      </LeiningenRunnerParameters>
      <method />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
      <method />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
      <method />
    </configuration>
    <configuration default="false" name="nREPL" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="gcnminc" />
      <setting name="jvmArgs" value="-Xmx1g -XX:+UseG1GC -XX:MaxGCPauseMillis=200" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <configuration default="false" name="uberjar" type="LeiningenRunConfiguration" factoryName="Leiningen">
      <LeiningenRunnerParameters>
        <option name="myGoals">
          <list>
            <option value="uberjar" />
          </list>
        </option>
        <option name="myWorkingDirectory" value="$PROJECT_DIR$" />
        <option name="profiles" value="" />
        <option name="trampoline" value="false" />
      </LeiningenRunnerParameters>
      <method />
    </configuration>
    <list size="3">
      <item index="0" class="java.lang.String" itemvalue="Clojure REPL.nREPL" />
      <item index="1" class="java.lang.String" itemvalue="Leiningen.uberjar" />
      <item index="2" class="java.lang.String" itemvalue="Clojure Application.core" />
    </list>
  </component>
  <component name="RuntimeDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="f3e5587a-6d94-489f-9f7b-bce1a0b7021a" name="Default" comment="" />
      <created>1486904296120</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1486904296120</updated>
    </task>
    <servers />
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="35" y="4" width="1684" height="1036" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Nl-Palette" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32890365" sideWeight="0.5" order="9" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.28185746" sideWeight="0.55755395" order="8" side_tool="true" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="false" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.28185746" sideWeight="0.44244605" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.36880735" sideWeight="0.16336633" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Properties" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3293979" sideWeight="0.5" order="11" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.14208633" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Run Dashboard" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <option name="time" value="1" />
    </breakpoint-manager>
    <watches-manager />
  </component>
  <component name="antWorkspaceConfiguration">
    <option name="IS_AUTOSCROLL_TO_SOURCE" value="false" />
    <option name="FILTER_TARGETS" value="false" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="18" lean-forward="false" selection-start-line="7" selection-start-column="18" selection-end-line="7" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="811903">
          <caret line="47759" column="53" lean-forward="true" selection-start-line="47759" selection-start-column="53" selection-end-line="47759" selection-end-column="53" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="34">
          <caret line="2" column="33" lean-forward="false" selection-start-line="2" selection-start-column="33" selection-end-line="2" selection-end-column="33" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="9" column="34" lean-forward="false" selection-start-line="9" selection-start-column="34" selection-end-line="9" selection-end-column="34" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="34">
          <caret line="2" column="33" lean-forward="false" selection-start-line="2" selection-start-column="33" selection-end-line="2" selection-end-column="33" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="34">
          <caret line="2" column="0" lean-forward="false" selection-start-line="2" selection-start-column="0" selection-end-line="2" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="34">
          <caret line="2" column="33" lean-forward="true" selection-start-line="2" selection-start-column="33" selection-end-line="2" selection-end-column="33" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="34">
          <caret line="2" column="0" lean-forward="false" selection-start-line="2" selection-start-column="0" selection-end-line="2" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea.exe.vmoptions" />
    <entry file="file://$USER_HOME$/.IdeaIC2016.3/idea64.exe.vmoptions" />
    <entry file="file://$USER_HOME$/AppData/Local/Temp/GCNminC-gcnminc-3188207250077127469.asm">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$PROJECT_DIR$/lib/clojure-1.8.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80155">
          <caret line="4715" column="6" lean-forward="false" selection-start-line="4715" selection-start-column="6" selection-end-line="4715" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/AppData/Local/Temp/GCNminC-gcnminc-183773424960184705.asm">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="603">
          <caret line="7223" column="0" lean-forward="false" selection-start-line="7223" selection-start-column="0" selection-end-line="7223" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/gcnminc/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-55">
          <caret line="239" column="18" lean-forward="false" selection-start-line="239" selection-start-column="18" selection-end-line="239" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="17">
          <caret line="1" column="41" lean-forward="false" selection-start-line="1" selection-start-column="41" selection-end-line="1" selection-end-column="41" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>IDE SDK</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>gcnminc</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Clojure-1.8.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>