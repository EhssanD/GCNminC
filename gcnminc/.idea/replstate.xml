<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1487406914895">{:repl-history {:ide [], :local [&quot;(let [filename  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_llvm.asm\&quot;\n      lines (clojure.string/split (slurp filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n      lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;)  lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;)  lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n      lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n      ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n      ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n      ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n      lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n      lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n      {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n      lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n      kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n      kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;)  %1) kernels)\n      kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n      kernels (map (fn [lines]\n                     (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                           groups  (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                           args    (nth groups 3 '())\n                           args    (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                           groups  (list\n                                     (list\n                                       \&quot;\&quot;\n                                       \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                       \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                       \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                       \&quot;\&quot;\n                                       (first (first groups)))\n                                     (list\n                                       \&quot;\\t.config\&quot;\n                                       \&quot;\\t\\t.dims x\&quot;\n                                       \&quot;\\t\\t.floatmode 192\&quot;)\n                                     (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                     (list\n                                       \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                       \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                       \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                     (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                     (list \&quot;\\t.text\&quot;)\n                                     (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                     (-&gt;&gt; (nth groups 2 nil)\n                                          (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                          ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                          (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                          (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                          ))\n                            lines  (apply concat groups)]\n                       lines))\n                    kernels)\n      ]\n\n  (spit \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4.asm\&quot;\n        (apply str\n               (concat\n          (list\n            \&quot;.amdcl2\\n\&quot;\n            \&quot;.gpu Stoney\\n\&quot;\n            \&quot;.64bit\\n\&quot;\n            \&quot;.arch_minor 0\\n\&quot;\n            \&quot;.arch_stepping 4\\n\&quot;\n            \&quot;.driver_version 200406\\n\&quot;\n            \&quot;\&quot;)\n          (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels)))))))&quot; &quot;(-main\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_llvm.asm\&quot;\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_GCNminC.asm\&quot;)&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename  (nth args 0)\n        output-filename  (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;)  %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups  (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args    (nth groups 3 '())\n                             args    (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups  (list\n                                       (list\n                                         \&quot;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;\&quot;\n                                         (first (first groups)))\n                                       (list\n                                         \&quot;\\t.config\&quot;\n                                         \&quot;\\t\\t.dims x\&quot;\n                                         \&quot;\\t\\t.floatmode 192\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                       (list\n                                         \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                         \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                       (list \&quot;\\t.text\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                       (-&gt;&gt; (nth groups 2 nil)\n                                            (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                            ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                            ))\n                             lines  (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename  (nth args 0)\n        output-filename  (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;)  lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;)  %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups  (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args    (nth groups 3 '())\n                             args    (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups  (list\n                                       (list\n                                         \&quot;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                         \&quot;\&quot;\n                                         (first (first groups)))\n                                       (list\n                                         \&quot;\\t.config\&quot;\n                                         \&quot;\\t\\t.dims x\&quot;\n                                         \&quot;\\t\\t.floatmode 192\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                       (list\n                                         \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                         \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                         \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                       (list \&quot;\\t.text\&quot;)\n                                       (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                       (-&gt;&gt; (nth groups 2 nil)\n                                            (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                            ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                            (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                            ))\n                             lines  (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (print metadata)\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename (nth args 0)\n        output-filename (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        {metadata lines} (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;) %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args (nth groups 3 '())\n                             args (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups (list\n                                      (list\n                                        \&quot;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;\&quot;\n                                        (first (first groups)))\n                                      (list\n                                        \&quot;\\t.config\&quot;\n                                        \&quot;\\t\\t.dims x\&quot;\n                                        \&quot;\\t\\t.floatmode 192\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                      (list\n                                        \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                        \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                      (list \&quot;\\t.text\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                      (-&gt;&gt; (nth groups 2 nil)\n                                           (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                           ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                           ))\n                             lines (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (doall (print metadata))\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename (nth args 0)\n        output-filename (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        [metadata lines] (second (split-with (complement #{\&quot;\\t.end_amdgpu_runtime_metadata\&quot;}) lines)) ; Drop unnecessary lines at the beginning of the file.\n        lines (remove #(re-find #\&quot;^\\t\t\\.end_amdgpu_runtime_metadata\&quot; %1) lines)\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;) %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args (nth groups 3 '())\n                             args (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups (list\n                                      (list\n                                        \&quot;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;\&quot;\n                                        (first (first groups)))\n                                      (list\n                                        \&quot;\\t.config\&quot;\n                                        \&quot;\\t\\t.dims x\&quot;\n                                        \&quot;\\t\\t.floatmode 192\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                      (list\n                                        \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                        \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                      (list \&quot;\\t.text\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                      (-&gt;&gt; (nth groups 2 nil)\n                                           (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                           ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                           ))\n                             lines (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (doall (print metadata))\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;(gcnminc.core/-main\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_llvm.asm\&quot;\n  \&quot;Z:\\\\GitHub\\\\gatelessgate\\\\src\\\\winbuild\\\\output\\\\x64\\\\Release\\\\equihashEllesmeregw256l4_GCNminC.asm\&quot;)&quot; &quot;(defn -main\n  [&amp; args]\n  (let [input-filename (nth args 0)\n        output-filename (nth args 1)\n        lines (clojure.string/split (slurp input-filename) #\&quot;([\\t ]*;[^\\n]*)?[\\t ]*\\r?\\n\\t*\&quot;) ; Convert consecutive white spaces into one white space.\n        lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^;\&quot; %1) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;[ \\t]+\&quot; \&quot; \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 0$\&quot; \&quot;/* $0 */\\n\\t\\t.useargs\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_dispatch_ptr = 1$\&quot; \&quot;/* $0 */\\n\\t\\t.usesetup\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^enable_sgpr_.*$\&quot; \&quot;/* $0 */\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^\\.amdgpu_hsa_kernel \&quot; \&quot;.kernel \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_dx10_clamp = 1$\&quot; \&quot;.dx10clamp\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_ieee_mode = 1$\&quot; \&quot;.ieeemode\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priv = 1$\&quot; \&quot;.priv\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^compute_pgm_rsrc1_priority = \&quot; \&quot;.priority \&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workitem_private_segment_byte_size =\&quot; \&quot;.scratchbuffer\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^workgroup_group_segment_byte_size =\&quot; \&quot;.localsize\&quot;) lines)\n        lines (map #(clojure.string/replace %1 #\&quot;^gds_segment_byte_size =\&quot; \&quot;.gdssize\&quot;) lines)\n\n        ;lines (remove #(re-find #\&quot;^[ \\t]*;\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.type (.*),@function$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^machine_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernel_code_\&quot; %1) lines)\n        ;lines (remove #(re-find #\&quot;^enable_sgpr_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^compute_pgm_rsrc\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^debug_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^reserved_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^kernarg_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^is_\&quot; %1) lines)\n\n        lines (remove #(re-find #\&quot;^enable_ordered_append_gds\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^max_scratch_backing_memory_byte_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_element_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workgroup_fbarrier_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_sgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^workitem_vgpr_count\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^group_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^private_segment_alignment\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^call_convention\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^wavefront_size\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^runtime_loader_kernel_symbol\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.text$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.hsa_code_object_\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^.Lfunc_end.*:$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^\\.section \\\&quot;\\.note\\.GNU-stack\\\&quot;$\&quot; %1) lines)\n        lines (remove #(re-find #\&quot;^(\\.globl |\\.p2align |\\.ident |\\.size )\&quot; %1) lines)\n\n        [metadata _ lines] (partition-by #(= \&quot;\\t.end_amdgpu_runtime_metadata\&quot;) lines) ; Drop unnecessary lines at the beginning of the file.\n\n        kernels (partition-by #(= \&quot;.section .AMDGPU.csdata\&quot; %1) lines)\n        kernels (remove #(= '(\&quot;.section\\t.AMDGPU.csdata\&quot;) %1) kernels)\n        kernels (remove #(not (re-find #\&quot;^.kernel \&quot; (first %1))) kernels)\n\n        kernels (map (fn [lines]\n                       (let [groups (partition-by #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; %1) lines)\n                             groups (remove #(re-find #\&quot;^\\.((end_)?amd_kernel_code_t|section \\.AMDGPU\\.runtime_metadata)$\&quot; (first %1)) groups)\n                             args (nth groups 3 '())\n                             args (remove #(not (re-find #\&quot;^\\.arg \&quot; %1)) args)\n                             groups (list\n                                      (list\n                                        \&quot;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\&quot;\n                                        \&quot;\&quot;\n                                        (first (first groups)))\n                                      (list\n                                        \&quot;\\t.config\&quot;\n                                        \&quot;\\t\\t.dims x\&quot;\n                                        \&quot;\\t\\t.floatmode 192\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (second groups))\n                                      (list\n                                        \&quot;\\t\\t.arg _.global_offset_0, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_1, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.global_offset_2, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.printf_buffer, \\\&quot;size_t\\\&quot;, void*, global, , rdonly\&quot;\n                                        \&quot;\\t\\t.arg _.vqueue_pointer, \\\&quot;size_t\\\&quot;, long\&quot;\n                                        \&quot;\\t\\t.arg _.aqlwrap_pointer, \\\&quot;size_t\\\&quot;, long\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) args)\n                                      (list \&quot;\\t.text\&quot;)\n                                      (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;) (list (second (first groups))))\n                                      (-&gt;&gt; (nth groups 2 nil)\n                                           (map #(clojure.string/replace %1 #\&quot;^\&quot; \&quot;\\t\\t\&quot;))\n                                           ;(map #(clojure.string/replace %1 #\&quot;_e32 \&quot; \&quot; \&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;^.*[^:]$\&quot; \&quot;\\t$0\&quot;))\n                                           (map #(clojure.string/replace %1 #\&quot;_lo_i32 \&quot; \&quot;_lo_u32 \&quot;))\n                                           ))\n                             lines (apply concat groups)]\n                         lines))\n                     kernels)\n        ]\n    (doall (print metadata))\n    (spit output-filename\n          (apply str\n                 (concat\n                   (list\n                     \&quot;.amdcl2\\n\&quot;\n                     \&quot;.gpu Stoney\\n\&quot;\n                     \&quot;.64bit\\n\&quot;\n                     \&quot;.arch_minor 0\\n\&quot;\n                     \&quot;.arch_stepping 4\\n\&quot;\n                     \&quot;.driver_version 200406\\n\&quot;\n                     \&quot;\&quot;)\n                   (apply str (map #(str %1 \&quot;\\n\&quot;) (apply concat kernels))))))))&quot; &quot;metadata&quot; &quot;(count metadata)&quot;], :remote []}}</component>
</project>